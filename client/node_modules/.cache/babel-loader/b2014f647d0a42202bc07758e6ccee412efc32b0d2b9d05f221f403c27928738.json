{"ast":null,"code":"import deleteImages from './utils/deleteImages';\nimport fetchData from './utils/fetchData';\nconst url = process.env.REACT_APP_SERVER_URL + '/room';\nexport const createRoom = async (room, currentUser, dispatch) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n  const result = await fetchData({\n    url,\n    body: room,\n    token: currentUser === null || currentUser === void 0 ? void 0 : currentUser.token\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'success',\n        message: 'The room has been added successfully'\n      }\n    });\n    clearRoom(dispatch, currentUser);\n    dispatch({\n      type: 'UPDATE_SECTION',\n      payload: 0\n    });\n    dispatch({\n      type: 'UPDATE_ROOM',\n      payload: result\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};\nexport const getRooms = async dispatch => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n  const result = await fetchData({\n    url,\n    method: 'GET'\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_ROOMS',\n      payload: result\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};\nexport const deleteRoom = async (room, currentUser, dispatch) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n  const result = await fetchData({\n    url: `${url}/${room._id}`,\n    method: 'DELETE',\n    token: currentUser === null || currentUser === void 0 ? void 0 : currentUser.token\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'success',\n        message: 'The room has been deleted successfully'\n      }\n    });\n    dispatch({\n      type: 'DELETE_ROOM',\n      payload: result._id\n    });\n    deleteImages(room.images, room.uid);\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};\nexport const updateRoom = async (room, currentUser, dispatch, updatedRoom, deletedImages) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n  const result = await fetchData({\n    url: `${url}/${updatedRoom._id}`,\n    method: 'PATCH',\n    body: room,\n    token: currentUser === null || currentUser === void 0 ? void 0 : currentUser.token\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'success',\n        message: 'The room has been updated successfully'\n      }\n    });\n    clearRoom(dispatch, currentUser, deletedImages, updatedRoom);\n    dispatch({\n      type: 'UPDATE_SECTION',\n      payload: 0\n    });\n    dispatch({\n      type: 'UPDATE_ROOM',\n      payload: result\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};\nexport const clearRoom = function (dispatch, currentUser) {\n  let images = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let updatedRoom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  dispatch({\n    type: 'RESET_ROOM'\n  });\n  localStorage.removeItem(currentUser.id);\n  if (updatedRoom) {\n    deleteImages(images, updatedRoom.uid);\n  } else {\n    deleteImages(images, currentUser.id);\n  }\n};\nexport const storeRoom = (location, details, images, updatedRoom, deletedImages, addedImages, userId) => {\n  if (location.lng || location.lat || details.price || details.title || details.description || images.length) {\n    localStorage.setItem(userId, JSON.stringify({\n      location,\n      details,\n      images,\n      updatedRoom,\n      deletedImages,\n      addedImages\n    }));\n    return true;\n  } else {\n    return false;\n  }\n};","map":{"version":3,"names":["deleteImages","fetchData","url","process","env","REACT_APP_SERVER_URL","createRoom","room","currentUser","dispatch","type","result","body","token","payload","open","severity","message","clearRoom","getRooms","method","deleteRoom","_id","images","uid","updateRoom","updatedRoom","deletedImages","arguments","length","undefined","localStorage","removeItem","id","storeRoom","location","details","addedImages","userId","lng","lat","price","title","description","setItem","JSON","stringify"],"sources":["C:/Users/HEMANG/Desktop/GitProject/place-to-stay/client/src/actions/room.js"],"sourcesContent":["import deleteImages from './utils/deleteImages';\r\nimport fetchData from './utils/fetchData';\r\n\r\nconst url = process.env.REACT_APP_SERVER_URL + '/room';\r\n\r\nexport const createRoom = async (room, currentUser, dispatch) => {\r\n  dispatch({ type: 'START_LOADING' });\r\n\r\n  const result = await fetchData(\r\n    { url, body: room, token: currentUser?.token },\r\n    dispatch\r\n  );\r\n  if (result) {\r\n    dispatch({\r\n      type: 'UPDATE_ALERT',\r\n      payload: {\r\n        open: true,\r\n        severity: 'success',\r\n        message: 'The room has been added successfully',\r\n      },\r\n    });\r\n    clearRoom(dispatch, currentUser);\r\n    dispatch({ type: 'UPDATE_SECTION', payload: 0 });\r\n    dispatch({ type: 'UPDATE_ROOM', payload: result });\r\n  }\r\n\r\n  dispatch({ type: 'END_LOADING' });\r\n};\r\n\r\nexport const getRooms = async (dispatch) => {\r\n  dispatch({ type: 'START_LOADING' });\r\n  const result = await fetchData({ url, method: 'GET' }, dispatch);\r\n  if (result) {\r\n    dispatch({ type: 'UPDATE_ROOMS', payload: result });\r\n  }\r\n  dispatch({ type: 'END_LOADING' });\r\n};\r\n\r\nexport const deleteRoom = async (room, currentUser, dispatch) => {\r\n  dispatch({ type: 'START_LOADING' });\r\n\r\n  const result = await fetchData(\r\n    { url: `${url}/${room._id}`, method: 'DELETE', token: currentUser?.token },\r\n    dispatch\r\n  );\r\n  if (result) {\r\n    dispatch({\r\n      type: 'UPDATE_ALERT',\r\n      payload: {\r\n        open: true,\r\n        severity: 'success',\r\n        message: 'The room has been deleted successfully',\r\n      },\r\n    });\r\n\r\n    dispatch({ type: 'DELETE_ROOM', payload: result._id });\r\n    deleteImages(room.images, room.uid);\r\n  }\r\n\r\n  dispatch({ type: 'END_LOADING' });\r\n};\r\n\r\nexport const updateRoom = async (\r\n  room,\r\n  currentUser,\r\n  dispatch,\r\n  updatedRoom,\r\n  deletedImages\r\n) => {\r\n  dispatch({ type: 'START_LOADING' });\r\n\r\n  const result = await fetchData(\r\n    {\r\n      url: `${url}/${updatedRoom._id}`,\r\n      method: 'PATCH',\r\n      body: room,\r\n      token: currentUser?.token,\r\n    },\r\n    dispatch\r\n  );\r\n  if (result) {\r\n    dispatch({\r\n      type: 'UPDATE_ALERT',\r\n      payload: {\r\n        open: true,\r\n        severity: 'success',\r\n        message: 'The room has been updated successfully',\r\n      },\r\n    });\r\n\r\n    clearRoom(dispatch, currentUser, deletedImages, updatedRoom);\r\n    dispatch({ type: 'UPDATE_SECTION', payload: 0 });\r\n    dispatch({ type: 'UPDATE_ROOM', payload: result });\r\n  }\r\n\r\n  dispatch({ type: 'END_LOADING' });\r\n};\r\n\r\nexport const clearRoom = (\r\n  dispatch,\r\n  currentUser,\r\n  images = [],\r\n  updatedRoom = null\r\n) => {\r\n  dispatch({ type: 'RESET_ROOM' });\r\n  localStorage.removeItem(currentUser.id);\r\n  if (updatedRoom) {\r\n    deleteImages(images, updatedRoom.uid);\r\n  } else {\r\n    deleteImages(images, currentUser.id);\r\n  }\r\n};\r\n\r\nexport const storeRoom = (\r\n  location,\r\n  details,\r\n  images,\r\n  updatedRoom,\r\n  deletedImages,\r\n  addedImages,\r\n  userId\r\n) => {\r\n  if (\r\n    location.lng ||\r\n    location.lat ||\r\n    details.price ||\r\n    details.title ||\r\n    details.description ||\r\n    images.length\r\n  ) {\r\n    localStorage.setItem(\r\n      userId,\r\n      JSON.stringify({\r\n        location,\r\n        details,\r\n        images,\r\n        updatedRoom,\r\n        deletedImages,\r\n        addedImages,\r\n      })\r\n    );\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}